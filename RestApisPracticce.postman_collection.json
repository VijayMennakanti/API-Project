{
	"info": {
		"_postman_id": "2dda5bc6-cbb2-40a6-8858-e68a8f83ad4e",
		"name": "RestApisPracticce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32782793",
		"_collection_link": "https://speeding-desert-814264.postman.co/workspace/sample~1b00427e-0519-4aa3-94c8-adb6184406df/collection/32782793-2dda5bc6-cbb2-40a6-8858-e68a8f83ad4e?action=share&source=collection_link&creator=32782793"
	},
	"item": [
		{
			"name": "PositiveTestCases",
			"item": [
				{
					"name": "ListUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 5 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\",\"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\",\"inactive\"]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"varshithama\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"varshiGENR345677659000@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SVerify if the response code received from server = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// Printing the Data-types\r",
									"console.log(\"The Datatype of email is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The Datatype of name is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The Datatype of status is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The Datatype of id is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The Datatype of gender is \"+typeof(pm.response.json().gender));\r",
									"\r",
									"// Capturing Response Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Response Code received from the Server is \"+pm.response.code+\" \" +pm.response.status);\r",
									"\r",
									"console.log(\"The Response time from server is \"+pm.response.responseTime+\" \"+\"ms\");\r",
									"\r",
									"console.log(\"The size of the Response body from the server is\");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The  Response body from the server is Json Format \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"Response Headers \");\r",
									"\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The Total number of the Headers are \"+pm.response.headers.count());\r",
									"console.log(pm.response.headers.get(\"Server\"));\r",
									"console.log(pm.response.headers.get(\"Date\"));\r",
									"\r",
									"// Capturing Request Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Http method used in the Request is \"+pm.request.method);\r",
									"\r",
									"console.log(\"The Api request URL sent to the server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The requset size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The request body/pay load used inthe Api request is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers used in the Apis request are\");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(pm.request.headers.count());\r",
									"\r",
									"console.log(pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The Api request name is \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"varshithmMNNVJKK\",\r\n    \"email\": \"VARTHIEYJJ900@gmail.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/ 7119485",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								" 7119485"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 2 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verify if response headers doesn’t reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7117844",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7117844"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PositiveTestCases-Environment-Variable-Usage",
			"item": [
				{
					"name": "ListUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 5 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\",\"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\",\"inactive\"]);\r",
									"});\r",
									"\r",
									"// Read the Environment-Variable By using the Get\r",
									"console.log(\"Environment Variable are: \");\r",
									"console.log(pm.environment.get(\"envName\"));\r",
									"console.log(pm.environment.get(\"envGender\"));\r",
									"console.log(pm.environment.get(\"envEmail\"));\r",
									"console.log(pm.environment.get(\"envStatus\"));\r",
									"\r",
									"// delete the Environment-Variables by using the Clear\r",
									"\r",
									"pm.environment.unset(\"envName\");\r",
									"pm.environment.unset(\"envGender\");\r",
									"pm.environment.unset(\"envEmail\");\r",
									"pm.environment.unset(\"envStatus\");\r",
									"\r",
									"//After Deletation\r",
									"console.log(\"After Deletion\");\r",
									"console.log(pm.environment.get(\"envName\"));\r",
									"console.log(pm.environment.get(\"envGender\"));\r",
									"console.log(pm.environment.get(\"envEmail\"));\r",
									"console.log(pm.environment.get(\"envStatus\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create the Environment Variables by using the -Set\r",
									"\r",
									"pm.environment.set(\"envEmail\", \"dev@gmail.com\");\r",
									"pm.environment.set(\"envStatus\", \"active\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{envName}}\",\r\n    \"gender\": \"{{envGender}}\",\r\n    \"email\": \"{{envEmail}}\",\r\n    \"status\": \"{{envStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SVerify if the response code received from server = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// Printing the Data-types\r",
									"console.log(\"The Datatype of email is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The Datatype of name is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The Datatype of status is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The Datatype of id is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The Datatype of gender is \"+typeof(pm.response.json().gender));\r",
									"\r",
									"// Capturing Response Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Response Code received from the Server is \"+pm.response.code+\" \" +pm.response.status);\r",
									"\r",
									"console.log(\"The Response time from server is \"+pm.response.responseTime+\" \"+\"ms\");\r",
									"\r",
									"console.log(\"The size of the Response body from the server is\");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The  Response body from the server is Json Format \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"Response Headers \");\r",
									"\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The Total number of the Headers are \"+pm.response.headers.count());\r",
									"console.log(pm.response.headers.get(\"Server\"));\r",
									"console.log(pm.response.headers.get(\"Date\"));\r",
									"\r",
									"// Capturing Request Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Http method used in the Request is \"+pm.request.method);\r",
									"\r",
									"console.log(\"The Api request URL sent to the server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The requset size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The request body/pay load used inthe Api request is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers used in the Apis request are\");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(pm.request.headers.count());\r",
									"\r",
									"console.log(pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The Api request name is \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"varshithmMNNVJKK\",\r\n    \"email\": \"VARTHIEYJJ900@gmail.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/ 7119485",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								" 7119485"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 2 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verify if response headers doesn’t reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7346759",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7346759"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment\n\n**There are 3 ways to create Environment variables in Postman:**\n\n**  \n(i) step by step approach  \n(ii) manual way  \n(iii) using java-scripts in pre-request script tab**\n\n**Test the ‘CREATE USER-API’ by pointing to Dev-Env and QA-Env as below:**\n\n**Dev-Env:**\n\n**envName: developer  \nenvEmail:** [<b>developer@dev.com</b>](https://mailto:developer@dev.com)\n\n**envStatus: active**\n\n**envGender: male**\n\n**QA-Env:  \n  \n**\n\n**envName: QA  \nenvEmail: qa**[<b>@testing.com</b>](https://mailto:developer@dev.com)\n\n**envStatus: inactive**\n\n**envGender: female**\n\n  \nEndFragment"
		},
		{
			"name": "PositiveTestCases-Global Varaible Usage",
			"item": [
				{
					"name": "ListUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Gtoken}}"
							}
						],
						"url": {
							"raw": "{{Gprotocol}}://{{Gurl}}/{{GendPoint}}",
							"protocol": "{{Gprotocol}}",
							"host": [
								"{{Gurl}}"
							],
							"path": [
								"{{GendPoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Print the Global-Variables By using the- Get\r",
									"\r",
									"console.log(\"-----Before--Clear--Global Variable------\");\r",
									"console.log(\"Gname: \"+pm.globals.get(\"Gname\"));\r",
									"console.log(\"Ggender: \"+pm.globals.get(\"Ggender\"));\r",
									"console.log(\"Gemail: \"+pm.globals.get(\"Gemail\"));\r",
									"console.log(\"Gstatus: \"+pm.globals.get(\"Gstatus\"));\r",
									"\r",
									"// Clear the Global-Variables By Using the-Clear\r",
									"pm.globals.unset(\"Gname\");\r",
									"pm.globals.unset(\"Ggender\");\r",
									"pm.globals.unset(\"Gemail\");\r",
									"pm.globals.unset(\"Gstatus\");\r",
									"\r",
									"// After Deletion the Global- variabel\r",
									"\r",
									"\r",
									"console.log(\"-----After--Clear--Global Variable------\");\r",
									"console.log(\"Gname: \"+pm.globals.get(\"Gname\"));\r",
									"console.log(\"Ggender: \"+pm.globals.get(\"Ggender\"));\r",
									"console.log(\"Gemail: \"+pm.globals.get(\"Gemail\"));\r",
									"console.log(\"Gstatus: \"+pm.globals.get(\"Gstatus\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a Global-Variable by using the Set Variable.\r",
									"pm.globals.set(\"Gname\", \"Vikas\");\r",
									"pm.globals.set(\"Ggender\", \"female\");\r",
									"pm.globals.set(\"Gemail\", \"Vikas34560087@gmail.com\");\r",
									"pm.globals.set(\"Gstatus\", \"active\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Gtoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Gname}}\",\r\n    \"gender\": \"{{Ggender}}\",\r\n    \"email\": \"{{Gemail}}\",\r\n    \"status\": \"{{Gstatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Gprotocol}}://{{Gurl}}/{{GendPoint}}",
							"protocol": "{{Gprotocol}}",
							"host": [
								"{{Gurl}}"
							],
							"path": [
								"{{GendPoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SVerify if the response code received from server = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// Printing the Data-types\r",
									"console.log(\"The Datatype of email is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The Datatype of name is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The Datatype of status is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The Datatype of id is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The Datatype of gender is \"+typeof(pm.response.json().gender));\r",
									"\r",
									"// Capturing Response Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Response Code received from the Server is \"+pm.response.code+\" \" +pm.response.status);\r",
									"\r",
									"console.log(\"The Response time from server is \"+pm.response.responseTime+\" \"+\"ms\");\r",
									"\r",
									"console.log(\"The size of the Response body from the server is\");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The  Response body from the server is Json Format \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"Response Headers \");\r",
									"\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The Total number of the Headers are \"+pm.response.headers.count());\r",
									"console.log(pm.response.headers.get(\"Server\"));\r",
									"console.log(pm.response.headers.get(\"Date\"));\r",
									"\r",
									"// Capturing Request Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Http method used in the Request is \"+pm.request.method);\r",
									"\r",
									"console.log(\"The Api request URL sent to the server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The requset size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The request body/pay load used inthe Api request is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers used in the Apis request are\");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(pm.request.headers.count());\r",
									"\r",
									"console.log(pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The Api request name is \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Gtoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"varshithmMNNVJKK\",\r\n    \"email\": \"VARTHIEYJJ900@gmail.com\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Gprotocol}}://{{Gurl}}/{{GendPoint}}/ 7119485",
							"protocol": "{{Gprotocol}}",
							"host": [
								"{{Gurl}}"
							],
							"path": [
								"{{GendPoint}}",
								" 7119485"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 2 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verify if response headers doesn’t reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Gtoken}}"
							}
						],
						"url": {
							"raw": "{{Gprotocol}}://{{Gurl}}/{{GendPoint}}/7117844",
							"protocol": "{{Gprotocol}}",
							"host": [
								"{{Gurl}}"
							],
							"path": [
								"{{GendPoint}}",
								"7117844"
							]
						}
					},
					"response": []
				}
			],
			"description": "**How to create Global variables ?**\n\n**  \nThere are 3 ways to create Global variables in Postman:**\n\n**  \n(i) step by step approach  \n(ii) manual way  \n(iii) using java-scripts in pre-request script tab  \n**"
		},
		{
			"name": "PositiveTestCases-Colleection Variables Usage",
			"item": [
				{
					"name": "ListUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cToken}}"
							}
						],
						"url": {
							"raw": "{{cProtocol}}://{{cUrl}}/{{cEndPoint}}",
							"protocol": "{{cProtocol}}",
							"host": [
								"{{cUrl}}"
							],
							"path": [
								"{{cEndPoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// To get the value of the Collection-Variables\r",
									"//before Deleton\r",
									"console.log(\"Before Clear or Delete the Collecton Variables\");\r",
									"console.log(\"Cname : \" +pm.collectionVariables.get(\"Cname\"));\r",
									"console.log(\"Cgender: \" +pm.collectionVariables.get(\"Cgender\"));\r",
									"console.log(\"Cemail: \" +pm.collectionVariables.get(\"Cemail\"));\r",
									"console.log(\"Cstatus: \" +pm.collectionVariables.get(\"Cstatus\"));\r",
									"\r",
									"\r",
									"// Delete the Collection Variables- Clear Functions\r",
									"\r",
									"pm.collectionVariables.unset(\"Cname\");\r",
									"pm.collectionVariables.unset(\"Cgender\");\r",
									"pm.collectionVariables.unset(\"Cemail\");\r",
									"pm.collectionVariables.unset(\"Cstatus\");\r",
									"\r",
									"//\r",
									"console.log(\"After Clear or Delete the Collecton Variables\");\r",
									"console.log(\"Cname : \" +pm.collectionVariables.get(\"Cname\"));\r",
									"console.log(\"Cgender: \" +pm.collectionVariables.get(\"Cgender\"));\r",
									"console.log(\"Cemail: \" +pm.collectionVariables.get(\"Cemail\"));\r",
									"console.log(\"Cstatus: \" +pm.collectionVariables.get(\"Cstatus\"));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a Collection Variable\r",
									"\r",
									"pm.collectionVariables.set(\"Cname\", \"vikram\");\r",
									"pm.collectionVariables.set(\"Cgender\", \"male\");\r",
									"pm.collectionVariables.set(\"Cemail\", \"vikram1238-098765432@gmail.com\");\r",
									"pm.collectionVariables.set(\"Cstatus\", \"inactive\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{Cname}}\",\r\n    \"gender\": \"{{Cgender}}\",\r\n    \"email\": \"{{Cemail}}\",\r\n    \"status\": \"{{Cstatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cProtocol}}://{{cUrl}}/{{cEndPoint}}",
							"protocol": "{{cProtocol}}",
							"host": [
								"{{cUrl}}"
							],
							"path": [
								"{{cEndPoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SVerify if the response code received from server = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// Printing the Data-types\r",
									"console.log(\"The Datatype of email is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The Datatype of name is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The Datatype of status is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The Datatype of id is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The Datatype of gender is \"+typeof(pm.response.json().gender));\r",
									"\r",
									"// Capturing Response Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Response Code received from the Server is \"+pm.response.code+\" \" +pm.response.status);\r",
									"\r",
									"console.log(\"The Response time from server is \"+pm.response.responseTime+\" \"+\"ms\");\r",
									"\r",
									"console.log(\"The size of the Response body from the server is\");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The  Response body from the server is Json Format \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"Response Headers \");\r",
									"\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The Total number of the Headers are \"+pm.response.headers.count());\r",
									"console.log(pm.response.headers.get(\"Server\"));\r",
									"console.log(pm.response.headers.get(\"Date\"));\r",
									"\r",
									"// Capturing Request Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Http method used in the Request is \"+pm.request.method);\r",
									"\r",
									"console.log(\"The Api request URL sent to the server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The requset size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The request body/pay load used inthe Api request is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers used in the Apis request are\");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(pm.request.headers.count());\r",
									"\r",
									"console.log(pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The Api request name is \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Dr.{{Cname}}\",\r\n    \"email\": \"{{Cemail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cProtocol}}://{{cUrl}}/{{cEndPoint}}/ 7342847",
							"protocol": "{{cProtocol}}",
							"host": [
								"{{cUrl}}"
							],
							"path": [
								"{{cEndPoint}}",
								" 7342847"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserApis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 2 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verify if response headers doesn’t reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cToken}}"
							}
						],
						"url": {
							"raw": "{{cProtocol}}://{{cUrl}}/{{cEndPoint}}/7342847",
							"protocol": "{{cProtocol}}",
							"host": [
								"{{cUrl}}"
							],
							"path": [
								"{{cEndPoint}}",
								"7342847"
							]
						}
					},
					"response": []
				}
			],
			"description": "**USAGE OF VARIABLES IN POSTMAN**\n\n**Variables acts as containers/place-holders to store an object value. In the Postman tool, we can create variables anywhere in the API syntax such as protocol, baseURL, endPoint, queryParameter, requestHeader, payload.**\n\n**Syntax of a variable: {{variableName}}**\n\n**There are 3 types of variables in Postman automation:**\n\n**(i) Collection variables : These variables are accessible within the collection where they were defined i.e., these variables are private and cannot be accessed by other collections\n\n(ii) Global variables : These variables are accessible across all the collections in the same workspace i.e., these variables are public and can be accessed by all other collections which are in the same workspace\n\n(iii) Environment variables : These variables are accessible across all the collections in the same workspace and are used in the context of environment i.e., these variables are public and can be accessed by all other collections which are in the same workspace however we use these variables when the APIs have to be executed by pointing to Dev-server/env, QA-server/env etc**\n\n**How to create Collection variables ?**\n\n**  \nThere are 3 ways to create Collection variables in Postman:**\n\n**  \n(i) step by step approach  \n(ii) manual way  \n(iii) using java-scripts in pre-request script tab  \n**"
		},
		{
			"name": "DDT-CSV",
			"item": [
				{
					"name": "ListUserApis>>All Browsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserApis>>All Browsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 5 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\",\"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\",\"inactive\"]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{varName}}\",\r\n    \"gender\": \"{{varGender}}\",\r\n    \"email\": \"{{varEmail}}\",\r\n    \"status\": \"{{varStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserApis>>All Browsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if the response code received from server = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// Printing the Data-types\r",
									"console.log(\"The Datatype of email is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The Datatype of name is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The Datatype of status is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The Datatype of id is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The Datatype of gender is \"+typeof(pm.response.json().gender));\r",
									"\r",
									"// Capturing Response Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Response Code received from the Server is \"+pm.response.code+\" \" +pm.response.status);\r",
									"\r",
									"console.log(\"The Response time from server is \"+pm.response.responseTime+\" \"+\"ms\");\r",
									"\r",
									"console.log(\"The size of the Response body from the server is\");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The  Response body from the server is Json Format \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"Response Headers \");\r",
									"\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The Total number of the Headers are \"+pm.response.headers.count());\r",
									"console.log(pm.response.headers.get(\"Server\"));\r",
									"console.log(pm.response.headers.get(\"Date\"));\r",
									"\r",
									"// Capturing Request Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Http method used in the Request is \"+pm.request.method);\r",
									"\r",
									"console.log(\"The Api request URL sent to the server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The requset size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The request body/pay load used inthe Api request is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers used in the Apis request are\");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(pm.request.headers.count());\r",
									"\r",
									"console.log(pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The Api request name is \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"jr.{{varName}}\",\r\n    \"email\": \"{{varEmailToUpdate}}\",\r\n    \"status\": \"{{varStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{varIDtoUpdate}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{varIDtoUpdate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserApis>>All Browsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 2 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verify if response headers doesn’t reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{varUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{varIDToDelete}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{varIDToDelete}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment\n\n**Testing the API request with different values of test-data and ensuring we always receive 2xx success response code from the server**\n\n  \nEndFragment"
		},
		{
			"name": "INTEROPERABILITY TESTING",
			"item": [
				{
					"name": "ListUserApis>>Windows OS + Edge browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Response Header Testing.\r",
									"pm.test.skip(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); \r",
									"\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36 Edg/126.0.2592.113",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserApis>>Mac OS + Safari browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 5 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\",\"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\",\"inactive\"]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Safari/605.1.15",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Ajay\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"Ajay77659000@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser>>ApisLinux OS + Firefox browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SVerify if the response code received from server = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// Printing the Data-types\r",
									"console.log(\"The Datatype of email is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The Datatype of name is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The Datatype of status is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The Datatype of id is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The Datatype of gender is \"+typeof(pm.response.json().gender));\r",
									"\r",
									"// Capturing Response Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Response Code received from the Server is \"+pm.response.code+\" \" +pm.response.status);\r",
									"\r",
									"console.log(\"The Response time from server is \"+pm.response.responseTime+\" \"+\"ms\");\r",
									"\r",
									"console.log(\"The size of the Response body from the server is\");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The  Response body from the server is Json Format \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"Response Headers \");\r",
									"\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The Total number of the Headers are \"+pm.response.headers.count());\r",
									"console.log(pm.response.headers.get(\"Server\"));\r",
									"console.log(pm.response.headers.get(\"Date\"));\r",
									"\r",
									"// Capturing Request Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Http method used in the Request is \"+pm.request.method);\r",
									"\r",
									"console.log(\"The Api request URL sent to the server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The requset size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The request body/pay load used inthe Api request is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers used in the Apis request are\");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(pm.request.headers.count());\r",
									"\r",
									"console.log(pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The Api request name is \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (X11; Linux i686; rv:128.0) Gecko/20100101 Firefox/128.0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mr.Ajay\",\r\n    \"email\": \"Ajay1@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/ 7134282",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								" 7134282"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserApis>>Android OS + Chrome browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 2 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verify if response headers doesn’t reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.6533.64 Mobile Safari/537.36",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7132635",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7132635"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment\n\n**We test the APIs across different OS, different browser(s), browser version(s) and verify if response code is 2xx success. To achieve this, we can customise the request header ‘User-Agent’ to the required value.**\n\n[<b>https://www.whatismybrowser.com/guides/the-latest-user-agent/</b>](https://www.whatismybrowser.com/guides/the-latest-user-agent/)\n\nEndFragment"
		},
		{
			"name": "DDT Using Functions",
			"item": [
				{
					"name": "ListUserApis>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Response Header Testing.\r",
									"pm.test.skip(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); \r",
									"\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserApis>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 5 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\",\"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\",\"inactive\"]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SVerify if the response code received from server = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// Printing the Data-types\r",
									"console.log(\"The Datatype of email is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The Datatype of name is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The Datatype of status is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The Datatype of id is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The Datatype of gender is \"+typeof(pm.response.json().gender));\r",
									"\r",
									"// Capturing Response Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Response Code received from the Server is \"+pm.response.code+\" \" +pm.response.status);\r",
									"\r",
									"console.log(\"The Response time from server is \"+pm.response.responseTime+\" \"+\"ms\");\r",
									"\r",
									"console.log(\"The size of the Response body from the server is\");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The  Response body from the server is Json Format \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"Response Headers \");\r",
									"\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The Total number of the Headers are \"+pm.response.headers.count());\r",
									"console.log(pm.response.headers.get(\"Server\"));\r",
									"console.log(pm.response.headers.get(\"Date\"));\r",
									"\r",
									"// Capturing Request Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Http method used in the Request is \"+pm.request.method);\r",
									"\r",
									"console.log(\"The Api request URL sent to the server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The requset size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The request body/pay load used inthe Api request is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers used in the Apis request are\");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(pm.request.headers.count());\r",
									"\r",
									"console.log(pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The Api request name is \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}} Ajay\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/ 7150320",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								" 7150320"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserApis>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 2 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verify if response headers doesn’t reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{$randomInt}}{{$randomInt}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{$randomInt}}{{$randomInt}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment\n\n**We test the APIs across different OS, different browser(s), browser version(s) and verify if response code is 2xx success. To achieve this, we can customise the request header ‘User-Agent’ to the required value.**\n\n[<b>https://www.whatismybrowser.com/guides/the-latest-user-agent/</b>](https://www.whatismybrowser.com/guides/the-latest-user-agent/)\n\nEndFragment"
		},
		{
			"name": "API Automation Chaining",
			"item": [
				{
					"name": "CreateUserApis>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 5 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\",\"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\",\"inactive\"]);\r",
									"});\r",
									"\r",
									"// Automation Chaining\r",
									"\r",
									" var jsonBody=pm.response.json();\r",
									"\r",
									" var extractedId=jsonBody.id;\r",
									" var extractedName=jsonBody.name;\r",
									" var extractedEmail=jsonBody.email;\r",
									" var extractedGender=jsonBody.gender;\r",
									" var extractedStatus=jsonBody.status;\r",
									"\r",
									"\r",
									"pm.globals.set(\"globalId\", extractedId);\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									"pm.globals.set(\"globalEmail\", extractedEmail);\r",
									"pm.globals.set(\"globalGender\", extractedGender);\r",
									"pm.globals.set(\"globalStatus\", extractedStatus);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SVerify if the response code received from server = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// Printing the Data-types\r",
									"console.log(\"The Datatype of email is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The Datatype of name is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The Datatype of status is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The Datatype of id is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The Datatype of gender is \"+typeof(pm.response.json().gender));\r",
									"\r",
									"// Capturing Response Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Response Code received from the Server is \"+pm.response.code+\" \" +pm.response.status);\r",
									"\r",
									"console.log(\"The Response time from server is \"+pm.response.responseTime+\" \"+\"ms\");\r",
									"\r",
									"console.log(\"The size of the Response body from the server is\");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The  Response body from the server is Json Format \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"Response Headers \");\r",
									"\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The Total number of the Headers are \"+pm.response.headers.count());\r",
									"console.log(pm.response.headers.get(\"Server\"));\r",
									"console.log(pm.response.headers.get(\"Date\"));\r",
									"\r",
									"// Capturing Request Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Http method used in the Request is \"+pm.request.method);\r",
									"\r",
									"console.log(\"The Api request URL sent to the server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The requset size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The request body/pay load used inthe Api request is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers used in the Apis request are\");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(pm.request.headers.count());\r",
									"\r",
									"console.log(pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The Api request name is \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}{{globalName}}\",\r\n    \"email\": \"{{globalEmail}}\",\r\n    \"status\": \"{{globalStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/ {{globalId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								" {{globalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserApis>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 2 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verify if response headers doesn’t reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListUserApis>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Response Header Testing.\r",
									"pm.test.skip(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); \r",
									"\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment\n\nStartFragment\n\n**API AUTOMATION CHAINING → It is the process of extracting the response from an API and supplying it as request to another dependent API(s). This is achieved by writing java scripts.**\n\n  \nEndFragment"
		},
		{
			"name": "E2E Automation",
			"item": [
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 5 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\",\"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\",\"inactive\"]);\r",
									"});\r",
									"\r",
									"// Automation Chaining\r",
									"var jsonBody=pm.response.json();\r",
									"var extractedId=jsonBody.id;\r",
									"var extractedName=jsonBody.name;\r",
									"var extractedEmail=jsonBody.email;\r",
									"var extractedGender=jsonBody.gender;\r",
									"var extractedStatus=jsonBody.status;\r",
									"\r",
									"pm.globals.set(\"globalId\", extractedId);\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									"pm.globals.set(\"globalEmail\", extractedEmail);\r",
									"pm.globals.set(\"globalGender\", extractedGender);\r",
									"pm.globals.set(\"globalStatus\", extractedStatus);\r",
									"\r",
									"\r",
									"//postman workflows and Conditional statements \r",
									"\r",
									"\r",
									"if(pm.response.code==201){\r",
									"\r",
									"    console.log(pm.info.requestName+\" Api has Passed.\");\r",
									"    pm.execution.setNextRequest(\"Verify if the User is Created\");\r",
									"}\r",
									"else{\r",
									"\r",
									"    console.log(pm.info.requestName+\"Api has Failed.\");\r",
									"     pm.execution.setNextRequest(\" \"); // stops the test execution.\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if the User is Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Response Header Testing.\r",
									"pm.test.skip(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); \r",
									"\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"// Verify if the User is Created\r",
									"\r",
									"pm.test(\"Verify User created with  Name \"+pm.globals.get(\"globalName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalName\"));\r",
									"});\r",
									"\r",
									"//postman workflows and Conditional statements \r",
									"\r",
									"\r",
									"if(pm.response.code==200){\r",
									"\r",
									"    console.log(pm.info.requestName+\"Api has Passed.\");\r",
									"    pm.execution.setNextRequest(\"Updated The Created User\");\r",
									"}\r",
									"else{\r",
									"\r",
									"    console.log(pm.info.requestName+\"Api has Failed.\");\r",
									"     pm.execution.setNextRequest(\" \"); // stops the test execution.\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updated The Created User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SVerify if the response code received from server = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"/* Printing the Data-types\r",
									"console.log(\"The Datatype of email is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The Datatype of name is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The Datatype of status is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The Datatype of id is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The Datatype of gender is \"+typeof(pm.response.json().gender)); \r",
									"\r",
									"// Capturing Response Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Response Code received from the Server is \"+pm.response.code+\" \" +pm.response.status);\r",
									"\r",
									"console.log(\"The Response time from server is \"+pm.response.responseTime+\" \"+\"ms\");\r",
									"\r",
									"console.log(\"The size of the Response body from the server is\");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The  Response body from the server is Json Format \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"Response Headers \");\r",
									"\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The Total number of the Headers are \"+pm.response.headers.count());\r",
									"console.log(pm.response.headers.get(\"Server\"));\r",
									"console.log(pm.response.headers.get(\"Date\"));\r",
									"\r",
									"// Capturing Request Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Http method used in the Request is \"+pm.request.method);\r",
									"\r",
									"console.log(\"The Api request URL sent to the server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The requset size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The request body/pay load used inthe Api request is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers used in the Apis request are\");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(pm.request.headers.count());\r",
									"\r",
									"console.log(pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The Api request name is \"+pm.info.requestName); */\r",
									"\r",
									"//Extracted the updated user\r",
									"\r",
									"var jsonBody=pm.response.json();\r",
									"\r",
									"var extractedUpdatedName=jsonBody.name;\r",
									"\r",
									"pm.globals.set(\"globalUpdatedName\",extractedUpdatedName );\r",
									"\r",
									"//postman workflows and Conditional statements \r",
									"\r",
									"\r",
									"if(pm.response.code==200){\r",
									"\r",
									"    console.log(pm.info.requestName+\" Api has Passed.\");\r",
									"    pm.execution.setNextRequest(\"Verify if the User is Updated\");\r",
									"}\r",
									"else{\r",
									"\r",
									"    console.log(pm.info.requestName+\"Api has Failed.\");\r",
									"     pm.execution.setNextRequest(\" \"); // stops the test execution.\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}}{{globalName}}\",\r\n    \"email\": \"{{globalEmail}}\",\r\n    \"status\": \"{{globalStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/ {{globalId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								" {{globalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if the User is Updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Response Header Testing.\r",
									"pm.test.skip(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); \r",
									"\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"// verify the Updated user\r",
									"\r",
									"\r",
									"pm.test(\"Verify Updated name is \"+pm.globals.get(\"globalUpdatedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.globals.get(\"globalUpdatedName\"));\r",
									"});\r",
									"\r",
									"//postman workflows and Conditional statements \r",
									"\r",
									"\r",
									"if(pm.response.code==200){\r",
									"\r",
									"    console.log(pm.info.requestName+\" Api has Passed.\");\r",
									"    pm.execution.setNextRequest(\"Delete Created User\");\r",
									"}\r",
									"else{\r",
									"\r",
									"    console.log(pm.info.requestName+\"Api has Failed.\");\r",
									"     pm.execution.setNextRequest(\" \"); // stops the test execution.\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Created User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 2 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verify if response headers doesn’t reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"\r",
									"//postman workflows and Conditional statements \r",
									"\r",
									"\r",
									"if(pm.response.code==204){\r",
									"\r",
									"    console.log(pm.info.requestName+\" Api has Passed.\");\r",
									"    pm.execution.setNextRequest(\"Verify if the User is Deleted\");\r",
									"}\r",
									"else{\r",
									"\r",
									"    console.log(pm.info.requestName+\"Api has Failed.\");\r",
									"     pm.execution.setNextRequest(\" \"); // stops the test execution.\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if the User is Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Response Header Testing.\r",
									"pm.test.skip(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); \r",
									"\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"// verify the Deleted user\r",
									"\r",
									"\r",
									"pm.test(\"Verify Deleted user Name \"+pm.globals.get(\"globalUpdatedName\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalUpdatedName\"));\r",
									"});\r",
									"\r",
									"//postman workflows and Conditional statements \r",
									"\r",
									"\r",
									"if(pm.response.code==204){\r",
									"\r",
									"    console.log(pm.info.requestName+\" Api has Passed.\");\r",
									"    pm.execution.setNextRequest(\"\");\r",
									"}\r",
									"else{\r",
									"\r",
									"    console.log(pm.info.requestName+\"Api has Failed.\");\r",
									"     pm.execution.setNextRequest(\" \"); // stops the test execution.\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment\n\nStartFragment\n\n**CREATE A USER (POST) → VERIFY IF THE USER IS CREATED (GET) → UPDATE THE CREATED USER (PATCH) → VERIFY IF THE USER IS UPDATED (GET) → DELETE THE CREATED USER (DELETE) → VERIFY IF THE USER IS DELETED (GET)**\n\n  \nEndFragment"
		},
		{
			"name": "PerformanceTesting",
			"item": [
				{
					"name": "ListUserApis>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"     pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 4 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Response Header Testing.\r",
									"pm.test.skip(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); \r",
									"\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUserApis>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"     pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 5 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"//Respond Body is Json-Format.\r",
									"pm.test(\"Verify if the response body is received from server is in Json format\", function () {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"/*//Response Header Testing.\r",
									"pm.test(\"Server is not present inthe Respond-Headers\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"//Responds Body Testing\r",
									"pm.test(\"Verify if Responds Body contains the Mandatory fileds such as Id,email,gender,status \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"      pm.expect(pm.response.text()).to.include(\"email\");\r",
									"       pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"       pm.expect(pm.response.text()).to.include(\"status\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\",\"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\",\"inactive\"]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SVerify if the response code received from server = 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response time from server < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if the response body is received in JSON format\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// Printing the Data-types\r",
									"console.log(\"The Datatype of email is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The Datatype of name is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The Datatype of status is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The Datatype of id is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The Datatype of gender is \"+typeof(pm.response.json().gender));\r",
									"\r",
									"// Capturing Response Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Response Code received from the Server is \"+pm.response.code+\" \" +pm.response.status);\r",
									"\r",
									"console.log(\"The Response time from server is \"+pm.response.responseTime+\" \"+\"ms\");\r",
									"\r",
									"console.log(\"The size of the Response body from the server is\");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"The  Response body from the server is Json Format \");\r",
									"console.log(pm.response.json());\r",
									"\r",
									"console.log(\"Response Headers \");\r",
									"\r",
									"console.log(pm.response.headers);\r",
									"\r",
									"console.log(\"The Total number of the Headers are \"+pm.response.headers.count());\r",
									"console.log(pm.response.headers.get(\"Server\"));\r",
									"console.log(pm.response.headers.get(\"Date\"));\r",
									"\r",
									"// Capturing Request Attributes and Print them on the Console\r",
									"\r",
									"console.log(\"The Http method used in the Request is \"+pm.request.method);\r",
									"\r",
									"console.log(\"The Api request URL sent to the server is \"+pm.request.url);\r",
									"\r",
									"console.log(\"The requset size is \");\r",
									"console.log(pm.request.size());\r",
									"\r",
									"console.log(\"The request body/pay load used inthe Api request is \");\r",
									"console.log(pm.request.body);\r",
									"\r",
									"console.log(\"The request headers used in the Apis request are\");\r",
									"console.log(pm.request.headers);\r",
									"\r",
									"console.log(pm.request.headers.count());\r",
									"\r",
									"console.log(pm.request.headers.get(\"Content-Type\"));\r",
									"\r",
									"console.log(\"The Api request name is \"+pm.info.requestName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}} Ajay\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/ 7150320",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								" 7150320"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserApis>>Random OS+ Random Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response code Testing\r",
									"pm.test(\"Verify if the response code received from server = 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"     pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"//Response Time Testing\r",
									"pm.test(\"Verify the Response time is < 2 Seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// Respond Body Testing\r",
									"pm.test(\"Verify if the response body is not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"/*pm.test(\"Verify if response headers doesn’t reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"Server\");\r",
									"}); */\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{$randomInt}}{{$randomInt}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{$randomInt}}{{$randomInt}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment\n\nStartFragment\n\n**We shall simulate multiple API requests being bombarded to the server continuously for ‘x’ duration to check if server is returning 2xx response code and not returning 4xx client side error or 5xx server side error.**\n\nStartFragment\n\n**Postman tool supports below load test types:**\n\n1. **Fixed profile**\n    \n2. **Ramp up profile**\n    \n3. **Peak profile**\n    \n4. **Spike profile**\n    \n\nEndFragment  \n  \n\nEndFragment"
		},
		{
			"name": "Negative Test Cases",
			"item": [
				{
					"name": "UnsupportedHttpMethoids",
					"item": [
						{
							"name": "CreateUserApis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response code Testing\r",
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUserApis>>Patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response code Testing\r",
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUserApis>>Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response code Testing\r",
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUserApis>>Get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response code Testing\r",
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserApis >>PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"varshithmMNNVJKK\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/ 7247582",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										" 7247582"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserApis >>DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"varshithmMNNVJKK\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/ 7247582",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										" 7247582"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserApis >>POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"varshithmMNNVJKK\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/ 7247582",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										" 7247582"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserApis >>GET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"varshithmMNNVJKK\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/ 7247582",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										" 7247582"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteUser>>POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7247580",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7247580"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteUser>>PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7247580",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7247580"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteUser>>PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7247580",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7247580"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteUser>>GET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/7247580",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"7247580"
									]
								}
							},
							"response": []
						},
						{
							"name": "ListUserApis>>POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "ListUserApis>>PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "ListUserApis>>DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if the response code received from server 4xx client error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"description": "**UNSUPPORTED HTTP METHODS TESTING -> Test the given API with an invalid http method ; exp response code: 4xx client side error**\n\n**TC#1: Test the GET API with POST/PUT/PATCH/DELETE methods and exp result= 4xx client side error**\n\n**TC#2: Test the POST API with GET/PUT/PATCH/DELETE methods and exp result= 4xx client side error**\n\n**TC#3: Test the PUT/PATCH API with GET/POST/DELETE methods and exp result= 4xx client side error**\n\n**TC#4: Test the DELETE API with GET/POST/PUT/PATCH methods and exp result= 4xx client side error**"
				},
				{
					"name": "Broken EndPoint Testing",
					"item": [
						{
							"name": "ListUserApis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response code Testing\r",
											"pm.test(\"verify the response code received from the server is 4xx or 5xx\", function () {\r",
											"    pm.response.to.be.error;\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateUserApis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response code Testing\r",
											"pm.test(\"Verify if the response code received from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error\r",
											"   \r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"varshithama\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateUserApis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response code Testing\r",
											"pm.test(\"Verify if the response code received from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error\r",
											"   \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"varshithmMNNVJKK\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/ 7250915",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										" 7250915"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteUserApis",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Response code Testing\r",
											"pm.test(\"Verify if the response code received from server is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error\r",
											"   \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/7250994",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										"7250994"
									]
								}
							},
							"response": []
						}
					],
					"description": "- **Test the given API with an invalid endPoint ; exp response code: 4xx client side error or 5xx server side error**\n    \n\n**TC#1: Test the APIs with outdated versions and the exp result is 4xx or 5xx error**\n\n**TC#2: Test the APIs with invalid user-id in UPDATE USER API & DELETE USER API and the exp result is 4xx or 5xx**"
				},
				{
					"name": "PayLoad Tampering Testing",
					"item": [
						{
							"name": "Missing Values inthe PayLoad",
							"item": [
								{
									"name": "CreateUserApis",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Response code Testing\r",
													"pm.test(\"Verify if the response code received from server is 4xx or 5xx error\", function () {\r",
													"    pm.response.to.be.error;\r",
													"     \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUserApis",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Response code Testing\r",
													"pm.test(\"Verify if the response code received from server is 4xx or 5xx error\", function () {\r",
													"    pm.response.to.be.error;\r",
													"     \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUserApis",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Response code Testing\r",
													"pm.test(\"Verify if the response code received from server is 4xx or 5xx error\", function () {\r",
													"    pm.response.to.be.error;\r",
													"     \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUserApis",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Response code Testing\r",
													"pm.test(\"Verify if the response code received from server is 4xx or 5xx error\", function () {\r",
													"    pm.response.to.be.error;\r",
													"     \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"\",\r\n    \"status\": \"active\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid DataTyoes",
							"item": [
								{
									"name": "CreateUserApis",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Response code Testing\r",
													"pm.test(\"Verify if the response code received from server is 4xx or 5xx error\", function () {\r",
													"    pm.response.to.be.error;\r",
													"     \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"01230400777788*&%$#90\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"01230400777788#****@gmail.com\",\r\n    \"status\": \"active\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Invalid Data Length",
							"item": [
								{
									"name": "CreateUserApis",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Response code Testing\r",
													"pm.test(\"Verify if the response code received from server is 4xx or 5xx error\", function () {\r",
													"    pm.response.to.be.error;\r",
													"     \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{$randomLoremParagraph}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUserApis",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Response code Testing\r",
													"pm.test(\"Verify if the response code received from server is 4xx or 5xx error\", function () {\r",
													"    pm.response.to.be.error;\r",
													"     \r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"vijAYkUMEAR vijAYkUMEAR vijAYkUMEAR vijAYkUMEAR vijAYkUMEARvijAYkUMEAR vijAYkUMEARvijAYkUMEAR vijAYkUMEARvijAYkUMEARvijAYkUMEAR vijAYkUMEARvijAYkUMEAR vijAYkUMEAR\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"VijayVijayVijayVijayVijayVijayVijayVijayVijayvvVijayVijayVijayVijayVijayVijayVijayvVijay@{{$randomLoremWord}}.com\",\r\n    \"status\": \"active\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "**Test the given API with an invalid payload such as missing data in the payload fields, invalid data type in the payload fields, invalid data length in the payload fields ; exp response code: 4xx client side error or 5xx server side error.**\n\n**TC#1: Verify if the CREATE USER API results in an error when name field is empty**\n\n**TC#2: Verify if the CREATE USER API results in an error when gender field is empty**\n\n**TC#3: Verify if the CREATE USER API results in an error when email field is empty**\n\n**TC#4: Verify if the CREATE USER API results in an error when status field is empty**\n\n**TC#5: Verify if the CREATE USER API results in an error when name field has numbers and special characters eg. name=0123456789\\~!@#$%^&\\*()_+**\n\n**TC#6: Verify if the CREATE USER API results in an error when email field has numbers and special characters eg. email=0123456789\\~!@#$%^&\\*()_+**\n\n**TC#7: Verify if the CREATE USER API results in an error when the name field has length beyond the limit eg. name\": \"isha training solutions isha training solutions isha training solutions isha training solutions isha training solutions isha training solutions isha training solutions**\n\n**TC#8: Verify if the CREATE USER API results in an error when the email field has length beyond the limit eg. \"email\": \"**[<b>ishatrainingsolutionsishatrainingsolutionsishatrainingsolutionsishatrainingsolutionsishatrainingsolutionsishatrainingsolutionsishatrainingsolutionsishatrainingsolutions@Oval.com</b>](https://mailto:ishatrainingsolutionsishatrainingsolutionsishatrainingsolutionsishatrainingsolutionsishatrainingsolutionsishatrainingsolutionsishatrainingsolutionsishatrainingsolutions@Oval.com)**\"**"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//"
				]
			}
		}
	],
	"variable": [
		{
			"key": "cProtocol",
			"value": "https"
		},
		{
			"key": "cUrl",
			"value": "gorest.co.in"
		},
		{
			"key": "cEndPoint",
			"value": "public/v2/users",
			"type": "string"
		},
		{
			"key": "cToken",
			"value": "dbbc4dde9f0d16356bf7c2ce760a8fccaaba8cd1e5f39e28c29af65b7f05583f"
		}
	]
}